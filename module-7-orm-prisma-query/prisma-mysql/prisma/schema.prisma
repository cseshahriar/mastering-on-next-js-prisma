// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


// enum type
enum UserType {
  Visitor
  Staff
  SuperAdmin
}

// model creation
model User {
  id Int @id @default(autoincrement())
  name String @db.Char(100) @default("")
  email String @unique
  password String
  role UserType
  active Boolean @default(false)
  profile Profile? // one to one back populate
  post Post[]
  comments Comment[]
}

model Employee {
  id Int @id @default(autoincrement())
  name String
  designation String
  city String
  salary Float
}

// relationship

// one tot one
model Profile {
  id Int @id @default(autoincrement())
  firstName String
  lastName String
  mobile String
  city String
  // one to one relationship
  userID Int @unique
  User User @relation(fields: [userID], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

// one to many
model Post {
  id Int @id @default(autoincrement())
  title String
  description String @db.LongText

  // post is one , many is user, user has many post
  // foreign key
  userID Int
  User User @relation(fields: [userID], references: [id], onDelete: Restrict, onUpdate: Cascade)
  comments Comment[]
}


// many to many
model Comment {
  id Int @id @default(autoincrement())
  text String

  // many to many
  // user has many comment
  userID Int
  User User @relation(fields: [userID], references: [id], onDelete: Restrict, onUpdate: Cascade)

  // post has many comment
  postID Int
  Post Post @relation(fields: [postID], references: [id], onDelete: Restrict, onUpdate: Cascade)
}